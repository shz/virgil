import foobar = foo/bar

struct data

function (ctx) {
  ctx....


};


list<list<int>>


list'list'a

struct layout {
  a = 1
  b = 2
}

struct something<T, U> {
  U = default(U)
}

struct layout {
  a = 1px
  b = 1
  bb : float = 1
}

struct layout {
  struct balloon {
    padding : px = 0
  }

  struct thing {
    px foo
    perc bar
  }

  px heightCallout
  px heightBelowGraph
  px padding
  px widthAxisLabels
  px ypixelTop
  px xchartStart
  px xchartEnd
  px xpixelStart
  px xpixelEnd
  px xpixelWidth
  px xpixels_per_xchart
  px ypixels_per_ychart

  balloon balloon
  list<thing> things = []



  list<struct> things {
    px foo
    perc bar
  }
}

function calculateLayout(layout l) return layout {
  # TODO




}

l = layout()

method layout.area(layout l) return px {

}

animation fade(time in, time out)
  list<int> foo = [1, 2, 3, 4]
  list<struct> foo {
    px a
    px b
  }

  foobar({a = 1px
          b = 2px})


  foo.push({
    a = 1px
    b = 2px
  })

  list<layout> bar = [{}]

renderer headline(ticker) {
  ctx.save()
  ctx.fillStyle = 'grey'
  ctx.font = headline @ 17px
  ctx.fillText(ticker.name + ' (' + ticker.symbol) # blah blah blah
  ctx.restore()
}

renderer balloon(float percCenter) {
  out time growIn = 350ms
  out time growOut = 150ms

  let fontSize = 14px
  let fontSize:px = 14px

  let t = 250ms
  let t : time = 250ms

  let foo = {
    a = 1
    b = foo
  }

  let growth = ramp(in, out)
  perc growth = this.rampCalculator(growIn, growOut)
  px fullWidth = width - 2 * L.padding - L.widthAxisLabels
  px heightFull = 0
  px fontSize = 14
  TextFit headline = paragraph(...)

}

renderer main(data) {
  this.delay(380ms).until(300ms)
}

export {
  main = main
  ballon = balloon
}
