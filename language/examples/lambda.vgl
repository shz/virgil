export function each(l : list<'T>, action : func<'T, int, void>) {
  # for i = 0 upto l.length {
  #   action(l[i], i)
  # }
  action(l[0], 0)
}

let l = [1, 2, 3, 4]
each(l, lambda(x : int, i : int) {
  # console.log(x)
})

# Lambdas passed directly to methods or functions don't require type
# information to be specified.  Instead, types will be inferred based
# on the function/method definition.
each(l, lambda(x, i) {
  1 + i
})

# The same goes for lambda return types
function inc(f : func<int>) : int {
  return f() + 1
}
inc(lambda {
  return 5
})

# You may pass null to a lambda, but unless the receiver is prepared
# to deal with that null, you'll get a runtime error.
inc(null) # This will crash
